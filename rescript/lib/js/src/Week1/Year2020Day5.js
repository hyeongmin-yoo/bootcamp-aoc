// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("../Util.js");
var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");

function makeParser(parseChar, input) {
  var parse = function (chars, prev) {
    return Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(chars, 0), (function ($$char) {
                      return Belt_Result.flatMap(Belt_Result.flatMap(Curry._1(parseChar, $$char), (function (unit) {
                                        return Belt_Result.map(prev, (function (__x) {
                                                      return Belt_Array.concat(__x, [unit]);
                                                    }));
                                      })), (function (units) {
                                    return parse(Belt_Array.sliceToEnd(chars, 1), {
                                                TAG: /* Ok */0,
                                                _0: units
                                              });
                                  }));
                    })), prev);
  };
  return parse(Util.$$String.toArray(input), {
              TAG: /* Ok */0,
              _0: []
            });
}

function parseRow(param) {
  return makeParser((function ($$char) {
                switch ($$char) {
                  case "B" :
                      return {
                              TAG: /* Ok */0,
                              _0: /* B */1
                            };
                  case "F" :
                      return {
                              TAG: /* Ok */0,
                              _0: /* F */0
                            };
                  default:
                    return {
                            TAG: /* Error */1,
                            _0: "unexpected character"
                          };
                }
              }), param);
}

function parseCol(param) {
  return makeParser((function ($$char) {
                switch ($$char) {
                  case "L" :
                      return {
                              TAG: /* Ok */0,
                              _0: /* L */0
                            };
                  case "R" :
                      return {
                              TAG: /* Ok */0,
                              _0: /* R */1
                            };
                  default:
                    return {
                            TAG: /* Error */1,
                            _0: "unexpected character"
                          };
                }
              }), param);
}

function parseSeatCode(text) {
  if (text.length !== 10) {
    return {
            TAG: /* Error */1,
            _0: "invalid input size"
          };
  }
  var match = Util.$$String.divide(text, 7);
  var colText = match[1];
  return Belt_Result.flatMap(parseRow(match[0]), (function (row) {
                return Belt_Result.flatMap(parseCol(colText), (function (col) {
                              return {
                                      TAG: /* Ok */0,
                                      _0: [
                                        row,
                                        col
                                      ]
                                    };
                            }));
              }));
}

function calcRowPos(rows) {
  return Belt_Array.reduce(rows, [
                0,
                127
              ], (function (prev, code) {
                  var end = prev[1];
                  var start = prev[0];
                  if (code) {
                    return [
                            (((end - start | 0) + 1 | 0) / 2 | 0) + start | 0,
                            end
                          ];
                  } else {
                    return [
                            start,
                            ((end - start | 0) / 2 | 0) + start | 0
                          ];
                  }
                }))[0];
}

function calcColPos(cols) {
  return Belt_Array.reduce(cols, [
                0,
                7
              ], (function (prev, code) {
                  var end = prev[1];
                  var start = prev[0];
                  if (code) {
                    return [
                            (((end - start | 0) + 1 | 0) / 2 | 0) + start | 0,
                            end
                          ];
                  } else {
                    return [
                            start,
                            ((end - start | 0) / 2 | 0) + start | 0
                          ];
                  }
                }))[0];
}

function toSeatCoord(param) {
  return [
          calcRowPos(param[0]),
          calcColPos(param[1])
        ];
}

function toSeatId(coord) {
  return (coord[0] << 3) + coord[1] | 0;
}

function parseSeatId(text) {
  return Belt_Result.map(Belt_Result.map(parseSeatCode(text), toSeatCoord), toSeatId);
}

function findMissingId(seatIds) {
  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(seatIds, 0), (function (current) {
                    return Belt_Option.map(Belt_Array.get(seatIds, 1), (function (next) {
                                  return [
                                          current,
                                          next
                                        ];
                                }));
                  })), (function (param) {
                var current = param[0];
                if ((param[1] - current | 0) > 1) {
                  return current + 1 | 0;
                } else {
                  return findMissingId(Belt_Array.sliceToEnd(seatIds, 1));
                }
              }));
}

function main(param) {
  var input = Fs.readFileSync("input/Week1/Year2020Day5.input.txt", "utf8");
  console.log(findMissingId(Belt_SortArray.stableSortBy(Belt_Array.keepMap(Belt_Array.map(Util.Input.toArray(input), parseSeatId), Util.Result.toOption), (function (a, b) {
                  return a - b | 0;
                }))));
}

main(undefined);

exports.makeParser = makeParser;
exports.parseRow = parseRow;
exports.parseCol = parseCol;
exports.parseSeatCode = parseSeatCode;
exports.calcRowPos = calcRowPos;
exports.calcColPos = calcColPos;
exports.toSeatCoord = toSeatCoord;
exports.toSeatId = toSeatId;
exports.parseSeatId = parseSeatId;
exports.findMissingId = findMissingId;
exports.main = main;
/*  Not a pure module */
