// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("../Util.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function splitCode(seatCode) {
  var row = seatCode.slice(0, 7);
  var col = seatCode.slice(7);
  return [
          row,
          col
        ];
}

function calcRowPos(code) {
  return Belt_Array.reduce(Util.$$String.toArray(code), [
                0,
                127
              ], (function (prev, code) {
                  var end = prev[1];
                  var start = prev[0];
                  switch (code) {
                    case "B" :
                        return [
                                (((end - start | 0) + 1 | 0) / 2 | 0) + start | 0,
                                end
                              ];
                    case "F" :
                        return [
                                start,
                                ((end - start | 0) / 2 | 0) + start | 0
                              ];
                    default:
                      return prev;
                  }
                }))[0];
}

function calcColPos(code) {
  return Belt_Array.reduce(Util.$$String.toArray(code), [
                0,
                7
              ], (function (prev, code) {
                  var end = prev[1];
                  var start = prev[0];
                  switch (code) {
                    case "L" :
                        return [
                                start,
                                ((end - start | 0) / 2 | 0) + start | 0
                              ];
                    case "R" :
                        return [
                                (((end - start | 0) + 1 | 0) / 2 | 0) + start | 0,
                                end
                              ];
                    default:
                      return prev;
                  }
                }))[0];
}

function toSeatCoord(param) {
  return [
          calcRowPos(param[0]),
          calcColPos(param[1])
        ];
}

function toSeatId(coord) {
  return (coord[0] << 3) + coord[1] | 0;
}

function findHighest(seatIds) {
  return Belt_Array.reduce(seatIds, -1, (function (prev, seatId) {
                return Math.max(prev, seatId);
              }));
}

function main(param) {
  var input = Fs.readFileSync("input/Week1/Year2020Day5.input.txt", "utf8");
  console.log(findHighest(Belt_Array.map(Belt_Array.map(Belt_Array.map(Util.Input.toArray(input), splitCode), toSeatCoord), toSeatId)));
}

main(undefined);

exports.splitCode = splitCode;
exports.calcRowPos = calcRowPos;
exports.calcColPos = calcColPos;
exports.toSeatCoord = toSeatCoord;
exports.toSeatId = toSeatId;
exports.findHighest = findHighest;
exports.main = main;
/*  Not a pure module */
