// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("../Util.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");

function toBinaryFloat(raw) {
  var num = Number("0b" + raw + "");
  if (num === NaN) {
    return ;
  } else {
    return num;
  }
}

function parseSeatId(text) {
  return Belt_Option.map(Belt_Option.flatMap(Belt_Option.map(Util.Result.toOption(Util.Result.traverse(Belt_Array.map(Util.$$String.toArray(text), (function ($$char) {
                                    switch ($$char) {
                                      case "F" :
                                      case "L" :
                                          return {
                                                  TAG: /* Ok */0,
                                                  _0: "0"
                                                };
                                      case "B" :
                                      case "R" :
                                          return {
                                                  TAG: /* Ok */0,
                                                  _0: "1"
                                                };
                                      default:
                                        return {
                                                TAG: /* Error */1,
                                                _0: "unexpected letter"
                                              };
                                    }
                                  })))), (function (arr) {
                        return arr.join("");
                      })), toBinaryFloat), (function (prim) {
                return prim | 0;
              }));
}

function findMissingId(seatIds) {
  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(seatIds, 0), (function (current) {
                    return Belt_Option.map(Belt_Array.get(seatIds, 1), (function (next) {
                                  return [
                                          current,
                                          next
                                        ];
                                }));
                  })), (function (param) {
                var current = param[0];
                if ((param[1] - current | 0) > 1) {
                  return current + 1 | 0;
                } else {
                  return findMissingId(Belt_Array.sliceToEnd(seatIds, 1));
                }
              }));
}

function main(param) {
  var input = Fs.readFileSync("input/Week1/Year2020Day5.input.txt", "utf8");
  console.log(findMissingId(Belt_SortArray.stableSortBy(Belt_Array.keepMap(Util.Input.toArray(input), parseSeatId), (function (a, b) {
                  return a - b | 0;
                }))));
}

main(undefined);

exports.toBinaryFloat = toBinaryFloat;
exports.parseSeatId = parseSeatId;
exports.findMissingId = findMissingId;
exports.main = main;
/*  Not a pure module */
