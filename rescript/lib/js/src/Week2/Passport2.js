// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util = require("../Util.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");

function parseYear(input) {
  return Util.Result.fromOption(Belt_Option.flatMap(Belt_Option.flatMap(Util.$$String.getMatchs(input, /^\d{4}$/), (function (__x) {
                        return Belt_Array.get(__x, 0);
                      })), Belt_Int.fromString), {
              TAG: /* Error */1,
              _0: "invalid year: " + input + ""
            });
}

function parseYearInRange(input, min, max) {
  return Belt_Result.flatMap(parseYear(input), (function (year) {
                if (Util.$$Range.inRange(year, min, max)) {
                  return {
                          TAG: /* Ok */0,
                          _0: year
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "out of range year (" + String(min) + "~" + String(max) + "): " + input + ""
                        };
                }
              }));
}

function parseHeight(input) {
  return Util.Result.fromOption(Belt_Option.flatMap(Util.$$String.getMatchs(input, /^(\d+)(cm|in)/), (function (matches) {
                    if (matches.length !== 3) {
                      return ;
                    }
                    var num = matches[1];
                    var unit = matches[2];
                    return Belt_Option.flatMap(Belt_Int.fromString(num), (function (__x) {
                                  switch (unit) {
                                    case "cm" :
                                        return {
                                                TAG: /* Cm */0,
                                                _0: __x
                                              };
                                    case "in" :
                                        return {
                                                TAG: /* Inch */1,
                                                _0: __x
                                              };
                                    default:
                                      return ;
                                  }
                                }));
                  })), {
              TAG: /* Error */1,
              _0: "invalid height: " + input + ""
            });
}

function parseHeightInRange(input, cm, inch) {
  return Belt_Result.flatMap(parseHeight(input), (function (height) {
                if (height.TAG === /* Cm */0) {
                  var max = cm[1];
                  var min = cm[0];
                  var val = height._0;
                  if (Util.$$Range.inRange(val, min, max)) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              TAG: /* Cm */0,
                              _0: val
                            }
                          };
                  } else {
                    return {
                            TAG: /* Error */1,
                            _0: "out of range height(cm: " + String(min) + "~" + String(max) + "): " + input + ""
                          };
                  }
                }
                var max$1 = inch[1];
                var min$1 = inch[0];
                var val$1 = height._0;
                if (Util.$$Range.inRange(val$1, min$1, max$1)) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            TAG: /* Cm */0,
                            _0: val$1
                          }
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "out of range height(inch: " + String(min$1) + "~" + String(max$1) + "): " + input + ""
                        };
                }
              }));
}

function parseHairColor(input) {
  return Util.Result.fromOption(Belt_Option.flatMap(Util.$$String.getMatchs(input, /^#[0-9a-f]{6}$/), (function (__x) {
                    return Belt_Array.get(__x, 0);
                  })), {
              TAG: /* Error */1,
              _0: "invalid hcl: " + input + ""
            });
}

function parseEyeColor(input) {
  switch (input) {
    case "amb" :
        return {
                TAG: /* Ok */0,
                _0: /* Amb */0
              };
    case "blu" :
        return {
                TAG: /* Ok */0,
                _0: /* Blu */1
              };
    case "brn" :
        return {
                TAG: /* Ok */0,
                _0: /* Brn */2
              };
    case "grn" :
        return {
                TAG: /* Ok */0,
                _0: /* Grn */4
              };
    case "gry" :
        return {
                TAG: /* Ok */0,
                _0: /* Gry */3
              };
    case "hzl" :
        return {
                TAG: /* Ok */0,
                _0: /* Hzl */5
              };
    case "oth" :
        return {
                TAG: /* Ok */0,
                _0: /* Oth */6
              };
    default:
      return {
              TAG: /* Error */1,
              _0: "invalid ecl: " + input + ""
            };
  }
}

function parsePassportID(input) {
  return Util.Result.fromOption(Belt_Option.flatMap(Util.$$String.getMatchs(input, /^\d{9}$/), (function (__x) {
                    return Belt_Array.get(__x, 0);
                  })), {
              TAG: /* Error */1,
              _0: "invalid pid: " + input + ""
            });
}

function make(data) {
  var results_0 = parseYearInRange(data.byr, 1920, 2002);
  var results_1 = parseYearInRange(data.iyr, 2010, 2020);
  var results_2 = parseYearInRange(data.eyr, 2020, 2030);
  var results_3 = parseHeightInRange(data.hgt, [
        150,
        193
      ], [
        59,
        76
      ]);
  var results_4 = parseHairColor(data.hcl);
  var results_5 = parseEyeColor(data.ecl);
  var results_6 = parsePassportID(data.pid);
  var results_7 = data.cid;
  var byr = results_0;
  if (byr.TAG === /* Ok */0) {
    var iyr = results_1;
    if (iyr.TAG === /* Ok */0) {
      var eyr = results_2;
      if (eyr.TAG === /* Ok */0) {
        var hgt = results_3;
        if (hgt.TAG === /* Ok */0) {
          var hcl = results_4;
          if (hcl.TAG === /* Ok */0) {
            var ecl = results_5;
            if (ecl.TAG === /* Ok */0) {
              var pid = results_6;
              if (pid.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          byr: byr._0,
                          iyr: iyr._0,
                          eyr: eyr._0,
                          hgt: hgt._0,
                          hcl: hcl._0,
                          ecl: ecl._0,
                          pid: pid._0,
                          cid: results_7
                        }
                      };
              }
              
            }
            
          }
          
        }
        
      }
      
    }
    
  }
  return {
          TAG: /* Error */1,
          _0: Belt_Option.getWithDefault(Belt_Option.map(Util.$$Option.traverse([
                        Util.Result.toOption(Util.Result.swap(byr)),
                        Util.Result.toOption(Util.Result.swap(results_1)),
                        Util.Result.toOption(Util.Result.swap(results_2)),
                        Util.Result.toOption(Util.Result.swap(results_3)),
                        Util.Result.toOption(Util.Result.swap(results_4)),
                        Util.Result.toOption(Util.Result.swap(results_5)),
                        Util.Result.toOption(Util.Result.swap(results_6))
                      ]), (function (__x) {
                      return __x.join(", ");
                    })), "fields are not fullfiled")
        };
}

exports.parseYear = parseYear;
exports.parseYearInRange = parseYearInRange;
exports.parseHeight = parseHeight;
exports.parseHeightInRange = parseHeightInRange;
exports.parseHairColor = parseHairColor;
exports.parseEyeColor = parseEyeColor;
exports.parsePassportID = parsePassportID;
exports.make = make;
/* No side effect */
