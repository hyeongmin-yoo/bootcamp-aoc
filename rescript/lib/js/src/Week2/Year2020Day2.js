// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("../Util.js");
var $$String = require("rescript/lib/js/string.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function inRange(target, param) {
  if (param[0] <= target) {
    return target <= param[1];
  } else {
    return false;
  }
}

function parsePair(input) {
  var nums = Belt_Array.map(input.trim().split("-"), Belt_Int.fromString);
  if (nums.length === 2) {
    var first = nums[0];
    if (first !== undefined) {
      var last = nums[1];
      if (last !== undefined) {
        return {
                TAG: /* Ok */0,
                _0: [
                  first,
                  last
                ]
              };
      }
      
    }
    
  }
  return {
          TAG: /* Error */1,
          _0: "failed to parse pair: " + input + ""
        };
}

function parsePassword(input) {
  var matches = Belt_Option.map(Belt_Option.map(Caml_option.null_to_opt(/^(\d+-\d+) (\w): (\w+)/.exec(input)), (function (prim) {
              return prim;
            })), (function (__x) {
          return Belt_Array.map(__x, (function (prim) {
                        if (prim == null) {
                          return ;
                        } else {
                          return Caml_option.some(prim);
                        }
                      }));
        }));
  if (matches !== undefined && matches.length === 4) {
    var pairStr = matches[1];
    if (pairStr !== undefined) {
      var $$char = matches[2];
      if ($$char !== undefined) {
        var value = matches[3];
        if (value !== undefined) {
          return Belt_Result.map(parsePair(pairStr), (function (pair) {
                        return {
                                pair: pair,
                                char: $$char,
                                value: value
                              };
                      }));
        }
        
      }
      
    }
    
  }
  return {
          TAG: /* Error */1,
          _0: "failed to parse password: " + input + ""
        };
}

function isValid1(password) {
  var $$char = password.char;
  var charLength = Belt_Array.keep(password.value.split(""), (function (param) {
          return $$String.equal($$char, param);
        })).length;
  return inRange(charLength, password.pair);
}

function isValid2(password) {
  var pair = password.pair;
  var $$char = password.char;
  var chars = password.value.split("");
  var matches_0 = Belt_Option.map(Belt_Array.get(chars, pair[0] - 1 | 0), (function (param) {
          return $$String.equal($$char, param);
        }));
  var matches_1 = Belt_Option.map(Belt_Array.get(chars, pair[1] - 1 | 0), (function (param) {
          return $$String.equal($$char, param);
        }));
  var first = matches_0;
  if (first === undefined) {
    return false;
  }
  var last = matches_1;
  if (last !== undefined) {
    return first !== last;
  } else {
    return false;
  }
}

function part1(input) {
  return Belt_Result.map(Belt_Result.map(Util.Result.traverse(Belt_Array.map(input.split("\n"), parsePassword)), (function (__x) {
                    return Belt_Array.keep(__x, isValid1);
                  })), (function (prim) {
                return prim.length;
              }));
}

function part2(input) {
  return Belt_Result.map(Belt_Result.map(Util.Result.traverse(Belt_Array.map(input.split("\n"), parsePassword)), (function (__x) {
                    return Belt_Array.keep(__x, isValid2);
                  })), (function (prim) {
                return prim.length;
              }));
}

function main(param) {
  var input = Fs.readFileSync("input/Week2/Year2020Day2.input.txt", "utf8");
  console.log("part 1.");
  Util.Result.print(part1(input));
  console.log("part 2.");
  Util.Result.print(part2(input));
}

main(undefined);

exports.inRange = inRange;
exports.parsePair = parsePair;
exports.parsePassword = parsePassword;
exports.isValid1 = isValid1;
exports.isValid2 = isValid2;
exports.part1 = part1;
exports.part2 = part2;
exports.main = main;
/*  Not a pure module */
