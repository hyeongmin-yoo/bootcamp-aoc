// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("../Util.js");
var $$String = require("rescript/lib/js/string.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function inRange(target, param) {
  if (param[0] <= target) {
    return target <= param[1];
  } else {
    return false;
  }
}

function parsePair(input) {
  var nums = input.trim().split("-");
  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(nums, 0), Belt_Int.fromString), (function (min) {
                return Belt_Option.map(Belt_Option.flatMap(Belt_Array.get(nums, 1), Belt_Int.fromString), (function (max) {
                              return [
                                      min,
                                      max
                                    ];
                            }));
              }));
}

function parsePassword(input) {
  return Util.Result.fromOption(Belt_Option.flatMap(Belt_Option.map(Caml_option.null_to_opt(/^(\d+-\d+) (\w): (\w+)/.exec(input)), (function (prim) {
                        return prim;
                      })), (function (matches) {
                    var rangeMatched = Belt_Option.flatMap(Belt_Array.get(matches, 1), (function (prim) {
                            if (prim == null) {
                              return ;
                            } else {
                              return Caml_option.some(prim);
                            }
                          }));
                    var charMatched = Belt_Option.flatMap(Belt_Array.get(matches, 2), (function (prim) {
                            if (prim == null) {
                              return ;
                            } else {
                              return Caml_option.some(prim);
                            }
                          }));
                    var valueMatched = Belt_Option.flatMap(Belt_Array.get(matches, 3), (function (prim) {
                            if (prim == null) {
                              return ;
                            } else {
                              return Caml_option.some(prim);
                            }
                          }));
                    return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(rangeMatched, parsePair), (function (pair) {
                                      return Belt_Option.map(charMatched, (function ($$char) {
                                                    return [
                                                            pair,
                                                            $$char
                                                          ];
                                                  }));
                                    })), (function (param) {
                                  var $$char = param[1];
                                  var pair = param[0];
                                  return Belt_Option.map(valueMatched, (function (value) {
                                                return {
                                                        pair: pair,
                                                        char: $$char,
                                                        value: value
                                                      };
                                              }));
                                }));
                  })), {
              TAG: /* Error */1,
              _0: "invalid input: " + input + ""
            });
}

function isValid1(password) {
  var $$char = password.char;
  var charLength = Belt_Array.keep(password.value.split(""), (function (param) {
          return $$String.equal($$char, param);
        })).length;
  return inRange(charLength, password.pair);
}

function isValid2(password) {
  var pair = password.pair;
  var lastIdx = pair[1];
  var $$char = password.char;
  var chars = password.value.split("");
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.map(Belt_Array.get(chars, pair[0] - 1 | 0), (function (param) {
                        return $$String.equal($$char, param);
                      })), (function (firstMatched) {
                    return Belt_Option.map(Belt_Option.map(Belt_Array.get(chars, lastIdx - 1 | 0), (function (param) {
                                      return $$String.equal($$char, param);
                                    })), (function (lastMatched) {
                                  return firstMatched !== lastMatched;
                                }));
                  })), false);
}

function part1(input) {
  return Belt_Result.map(Belt_Result.map(Util.Result.traverse(Belt_Array.map(input.split("\n"), parsePassword)), (function (__x) {
                    return Belt_Array.keep(__x, isValid1);
                  })), (function (prim) {
                return prim.length;
              }));
}

function part2(input) {
  return Belt_Result.map(Belt_Result.map(Util.Result.traverse(Belt_Array.map(input.split("\n"), parsePassword)), (function (__x) {
                    return Belt_Array.keep(__x, isValid2);
                  })), (function (prim) {
                return prim.length;
              }));
}

function main(param) {
  var input = Fs.readFileSync("input/Week2/Year2020Day2.input.txt", "utf8");
  console.log("part 1.");
  Util.Result.print(part1(input));
  console.log("part 2.");
  Util.Result.print(part2(input));
}

main(undefined);

exports.inRange = inRange;
exports.parsePair = parsePair;
exports.parsePassword = parsePassword;
exports.isValid1 = isValid1;
exports.isValid2 = isValid2;
exports.part1 = part1;
exports.part2 = part2;
exports.main = main;
/*  Not a pure module */
