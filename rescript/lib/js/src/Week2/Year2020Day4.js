// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("../Util.js");
var Passport1 = require("./Passport1.js");
var Passport2 = require("./Passport2.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Belt_HashMapString = require("rescript/lib/js/belt_HashMapString.js");

function splitToPassportRaw(input) {
  return input.split("\n\n");
}

function normalizeSpaces(input) {
  return input.trim().replace(/\s+/g, " ");
}

function parseFieldPair(input) {
  var pair = input.split(":");
  if (pair.length !== 2) {
    return {
            TAG: /* Error */1,
            _0: "failed to parse field: " + input + ""
          };
  }
  var key = pair[0];
  var value = pair[1];
  return {
          TAG: /* Ok */0,
          _0: [
            key,
            value
          ]
        };
}

function parsePassportData(input) {
  return Belt_Result.map(Util.Result.traverse(Belt_Array.map(normalizeSpaces(input).split(" "), parseFieldPair)), Belt_HashMapString.fromArray);
}

function part1(input) {
  return Belt_Array.keepMap(Belt_Array.map(Belt_Array.map(input.split("\n\n"), parsePassportData), (function (__x) {
                    return Belt_Result.flatMap(__x, Passport1.make);
                  })), Util.Result.toOption).length;
}

function part2(input) {
  return Belt_Array.keepMap(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n\n"), parsePassportData), (function (__x) {
                        return Belt_Result.flatMap(__x, Passport1.make);
                      })), (function (__x) {
                    return Belt_Result.flatMap(__x, Passport2.make);
                  })), Util.Result.toOption).length;
}

function main(param) {
  var input = Fs.readFileSync("input/Week2/Year2020Day4.input.txt", { "encoding": "utf8" });
  var __x = part1(input);
  console.log("part1:", __x);
  var __x$1 = part2(input);
  console.log("part2:", __x$1);
}

main(undefined);

exports.splitToPassportRaw = splitToPassportRaw;
exports.normalizeSpaces = normalizeSpaces;
exports.parseFieldPair = parseFieldPair;
exports.parsePassportData = parsePassportData;
exports.part1 = part1;
exports.part2 = part2;
exports.main = main;
/*  Not a pure module */
