// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function tap(arr, fn) {
  return Belt_Array.map(arr, (function (it) {
                Curry._1(fn, it);
                return it;
              }));
}

var $$Array = {
  tap: tap
};

var Input = {};

function traverse(items) {
  return Belt_Array.reduce(items, [], (function (acc, it) {
                return Belt_Option.flatMap(acc, (function (prev) {
                              return Belt_Option.map(it, (function (val) {
                                            return Belt_Array.concat(prev, [val]);
                                          }));
                            }));
              }));
}

var $$Option = {
  traverse: traverse
};

function toArray(str) {
  return Array.from(str);
}

function divide(str, anchor) {
  var first = str.slice(0, anchor);
  var last = str.slice(anchor);
  return [
          first,
          last
        ];
}

function getMatchs(str, re) {
  return Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(Caml_option.null_to_opt(re.exec(str)), (function (prim) {
                        return prim;
                      })), (function (__x) {
                    return Belt_Array.map(__x, (function (prim) {
                                  if (prim == null) {
                                    return ;
                                  } else {
                                    return Caml_option.some(prim);
                                  }
                                }));
                  })), traverse);
}

var $$String = {
  toArray: toArray,
  divide: divide,
  getMatchs: getMatchs
};

function toOption(result) {
  if (result.TAG === /* Ok */0) {
    return Caml_option.some(result._0);
  }
  
}

function fromOption(option, fromNone) {
  if (option !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.valFromOption(option)
          };
  } else {
    return fromNone;
  }
}

function traverse$1(results) {
  return Belt_Array.reduce(results, {
              TAG: /* Ok */0,
              _0: []
            }, (function (r, it) {
                return Belt_Result.flatMap(r, (function (prev) {
                              return Belt_Result.map(it, (function (val) {
                                            return Belt_Array.concat(prev, [val]);
                                          }));
                            }));
              }));
}

function swap(result) {
  if (result.TAG === /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: result._0
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: result._0
          };
  }
}

function print(result) {
  if (result.TAG === /* Ok */0) {
    console.log("Ok:", result._0);
    return ;
  }
  console.log("Err:", result._0);
}

var Result = {
  toOption: toOption,
  fromOption: fromOption,
  traverse: traverse$1,
  swap: swap,
  print: print
};

function inRange(val, min, max) {
  if (Caml_obj.lessequal(min, val)) {
    return Caml_obj.lessequal(val, max);
  } else {
    return false;
  }
}

var $$Range = {
  inRange: inRange
};

exports.$$Array = $$Array;
exports.Input = Input;
exports.$$Option = $$Option;
exports.$$String = $$String;
exports.Result = Result;
exports.$$Range = $$Range;
/* No side effect */
